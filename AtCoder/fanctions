nCr 前処理O(N) クエリ処理O(1)
COMinit();で初期化後、COM(n, r)で使用
---------------------------------------------------------------------------
const int MAX = 510000;
const int MOD = 1000000007;

long long fac[MAX], finv[MAX], inv[MAX];

void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}

long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}

int main() {
    COMinit();
    cout << COM(100000, 50000) << endl;
}
---------------------------------------------------------------------------

除算が含まれる場合のMODの計算
---------------------------------------------------------------------------
long long modinv(long long a, long long m) {
    long long b = m, u = 1, v = 0;
    while (b) {
        long long t = a / b;
        a -= t * b; swap(a, b);
        u -= t * v; swap(u, v);
    }
    u %= m;
    if (u < 0) u += m;
    return u;
}

int main() {
    const int MOD = 1000000007;

    long long a = 12345678900000;
    long long b = 100000;

    a %= MOD;
    cout << a * modinv(b, MOD) % MOD << endl;
}
---------------------------------------------------------------------------

累乗のMODの計算
---------------------------------------------------------------------------
long long modpow(long long a, long long n, long long mod) {
    long long res = 1;
    while (n > 0) {
        if (n & 1) res = res * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

int main() {
    cout << modpow(3, 45, 1000000007) << endl;
}
---------------------------------------------------------------------------
